set(TARGET_NAME trtx)

set(TARGET_DIR ${CMAKE_CURRENT_SOURCE_DIR})

#### TensorRT
find_path(TENSORRT_INCLUDE_DIR NvInfer.h
  HINTS ${TENSORRT_ROOT} ${CUDA_TOOLKIT_ROOT_DIR}
  PATH_SUFFIXES include)
MESSAGE(STATUS "Found TensorRT headers at ${TENSORRT_INCLUDE_DIR}")
find_library(TENSORRT_LIBRARY_INFER nvinfer
  HINTS ${TENSORRT_ROOT} ${TENSORRT_BUILD} ${CUDA_TOOLKIT_ROOT_DIR}
  PATH_SUFFIXES lib lib64 lib/x64)
find_library(TENSORRT_LIBRARY_INFER_PLUGIN nvinfer_plugin
  HINTS  ${TENSORRT_ROOT} ${TENSORRT_BUILD} ${CUDA_TOOLKIT_ROOT_DIR}
  PATH_SUFFIXES lib lib64 lib/x64)
set(TENSORRT_LIBRARY ${TENSORRT_LIBRARY_INFER} ${TENSORRT_LIBRARY_INFER_PLUGIN})
MESSAGE(STATUS "Find TensorRT libs at ${TENSORRT_LIBRARY}")
find_package_handle_standard_args(
  TENSORRT DEFAULT_MSG TENSORRT_INCLUDE_DIR TENSORRT_LIBRARY)
if(NOT TENSORRT_FOUND)
  message(ERROR "Cannot find TensorRT library.")
endif()

set(SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/logger.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/application.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp
)

add_executable(${TARGET_NAME}
    ${SOURCES}
)

target_include_directories(${TARGET_NAME}
    PUBLIC ${TENSORRT_INCLUDE_DIR}
    PUBLIC ${CUDA_INSTALL_DIR}/include
    PRIVATE ${TARGET_DIR}
)

set(DEPENDENCY_LIBS
    ${CUDART_LIB}
    ${CUBLAS_LIB}
    ${CUDNN_LIB}
    ${RT_LIB}
    ${CMAKE_DL_LIBS}
    ${CMAKE_THREAD_LIBS_INIT}
    ${TENSORRT_LIBRARY}
)

message(STATUS "DEPENDENCY_LIBS: ${DEPENDENCY_LIBS}")

target_compile_options(${TARGET_NAME} PUBLIC "-fno-rtti")

target_link_libraries(${TARGET_NAME}
    ${DEPENDENCY_LIBS}
    -Wl,--unresolved-symbols=ignore-in-shared-libs
)

set_target_properties(${TARGET_NAME}
    PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY "${TRTX_OUT_DIR}"
    LIBRARY_OUTPUT_DIRECTORY "${TRTX_OUT_DIR}"
    RUNTIME_OUTPUT_DIRECTORY "${TRTX_OUT_DIR}"
)